from aiida_lammps.data.pot_plugins.base_plugin import PotentialAbstract


class Tersoff(PotentialAbstract):
    """Class for creation of Tersoff potential inputs."""

    potential_fname = "potential.pot"

    def validate_data(self, data):
        """Validate the input data."""
        pass

    def get_external_content(self):
        potential_file = (
            "# Potential file generated by aiida plugin "
            "(please check citation in the original file)\n"
        )
        for key in sorted(self.data.keys()):
            potential_file += "{}    {}\n".format(key, self.data[key])

        return {self.potential_fname: potential_file}

    def get_input_potential_lines(self, kind_elements=None):

        lammps_input_text = "pair_style      tersoff\n"
        lammps_input_text += "pair_coeff      * * {} {}\n".format(
            self.potential_fname, " ".join(kind_elements)
        )

        return lammps_input_text

    @property
    def atom_style(self):
        return "atomic"

    @property
    def default_units(self):
        return "metal"
